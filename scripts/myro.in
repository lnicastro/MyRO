#!@PERL@ -Wall

# ----------------------------------------------------------------------^
# Copyright (C) 2004, 2005, 2006, 2007 Giorgio Calderone <gcalderone@ifc.inaf.it>
# 
# This file is part of MYRO.
# 
# MYRO is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# MYRO is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with MYRO; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
# 
# ----------------------------------------------------------------------$

use strict;
use DBI();

#http://search.cpan.org/~capttofu/DBD-mysql/
#
#rpm:
#perl-DBI
#perl-DBD-MySQL
# 
#cpan
#install DBD::mysql
#force install DBD::mysql
#


##@ONERR_DIE|An error occurred during SELECT myro.assign_usr_to_grp('@USER@', '@GROUP@')|
#SELECT myro.assign_usr_to_grp('@USER@', '@GROUP@')//


# ---- Global variables
my $root= "";
my $pass= "";
my $dbname = "";
my $user=""; 
my $host="";
my $group=""; 
my $su="";
my $descr="";
my $email="";
my $table="";
my $view="";
my $flist = "";
my $dbh = 0;

my $read_cnf = 0;  #Read root password from ~/.my.cnf (section with user=root)

my $myrover = '@VERSION@';
my $MYROhead = "\nMYRO - Record Oriented privilege system (MySQL), ver. $myrover" .
            "\nGiorgio Calderone - giorgio.calderone\@inaf.it and Luciano Nicastro - luciano.nicastro\@inaf.it\n";

my $pre = '@prefix@/share/myro/sql';
my $logfileName = "myro.log";
my $logfd;

my $myro_checked = 0;

# ---- Options variables
my $optinteractive = 0;
my $optreadonly = 0;
my $optlog = 0;
my $optlogfile = 0;



sub usage {
print <<'EOT';
Usage: myro [Options] [<Command1> [<Command2> [...]]]

Options are:
   -h | --help,    print this usage message.
   --interactive   activate interactive interface.
   --log,          print SQL queries on standard output.
   --logfile       print SQL queries on file myro.sql.
   --readonly,     do not execute any query that would modify the database.
   --cnf           read root password from "~/.my.cnf".
   -v | --ver,     print version number.


There can be any number of commands, each followed by its own
arguments. When using the interactive interface the arguments must be
given through stdin and those on command line will be ignored.


Commands are:

--install
  install MYRO facilities.

--deinstall
  deinstall MYRO facilities.

--udf
  redefine UDF.

--protect <DBName> <Table> <View>
  Apply protection to table. 

  <DBName> name of the database which contains the table to protect;
  <Table> name of the table to which protection should be applied;
  <View> name of the view to be created.


--remprotect <DBName> <Table>
  Remove protection for table. 

  <DBName> name of the database which contains the table;
  <Table> name of the table from which protection should be removed.


--extended <DBName> <Table>
  Create extended views for a table (*_long, *_fmtlong, *_ls)

  <DBName> name of the database which contains the table;
  <Table> name of the table for which views should be created.


--addgroup <GroupName> [<Description>]
  Add group.

  <GroupName>: group name;
  <Description>: description for the group (can be enclosed in single
                 quotes);


--delgroup <GroupName>
  Delete groups.

  <GroupName>: group name;


--assign <UserName> <Group>
  Assigns a user to a group.

  <UserName>: user name;
  <Group>: group to which user should be assigned.


--moduser <UserName> [<Group> [<Su> [<Description> [<Email>]]]]
  Modify users entry.

  <UserName>: user name;
  <Group>: default group for the user (default is a group with the same
           name as the user)
  <Su>: a flag (0 or 1) to tell if the user is a Super-User;
  <Description>: description for the user (can be enclosed in single
                 quotes);
  <Email>: the email address for the user (can be enclosed in single
           quotes);


--grant <UserName> <Host> <DBName> <View>
  Set grants for a user on a table protected by myro.

  <UserName>: user name;
  <Host>: host address from which the user connects to MySQL server;
  <DBName> database name which contain the table;
  <View> name of the view (protected by MYRO) to which user must be
          granted.
EOT
}



# ---- General routines
sub trim {
    $_ = shift(@_);
    chomp;
    s/\t+//g;
    s/\t//g;
    s/\r+//g;
    s/\r//g;
    s/^ +//g;
    s/ +$//g;
    s/^ //g;
    s/ $//g;
    return $_;
}


sub readPassword {
    my $u = shift(@_);
    my $my_cnf = $ENV{HOME} ."/.my.cnf";
    my ($key, $val);
    my $p = "";

    if (-e $my_cnf) {
      my $in;
      open ($in, "< $my_cnf") || die("cannot open file $my_cnf");
# Assume "user" tag before "password"
      LINE: while(<$in>) {
        next LINE if /^\[/ || /^$/;
        ($key, $val) = split('=', $_);
        $key =~ tr/ //ds;
        $val =~ tr/ \n//ds;
        if ($key eq "user" && $val ne $u) {
          last;
        }
        if ($key eq "password") {
          $p = $val;
          last;
        }
      }
      close $in;
    }

    return $p;
}



sub askPassword {
    my $u = shift(@_);
    print "";
    system "stty -echo";
    print "Insert password for user $u: ";
    my $pass = <STDIN>;
    system "stty echo";
    print "";
    chomp($pass);
    return $pass;
}
     

sub readFile {
    my $fi = shift(@_);
    my $in;
    open ($in, "< $pre/$fi") || die("cannot open file $fi");

    my $sql = '';
    while(<$in>) {
	$sql .= $_;
    }

    close $in;
    return prepareQueries($sql);
}


sub readStdin {
    my $v = <>;
    chomp $v;
    return trim($v);
}


# ---- Logging routines
sub myro_log {
    print shift(@_);

#    if ($optforce == 0) {
#	print "Continue with ENTER.";
#	my $dummy = <STDIN>;
#    }
}

sub logInfo {
    myro_log("INFO: " . shift(@_));
}

sub logWarn {
    myro_log("WARN: " . shift(@_));
}

sub logErr {
    myro_log("ERR: " . shift(@_));
}

sub logFatal {
    print "FATAL: " . shift(@_);
    die;
}








# ---- Database routines
sub connectToDB {
    my $u = "root"; #shift(@_);
    my $p = "";

    if ($read_cnf) {
      $p = readPassword($u);
    }

    if ($p eq "") {
      $p = askPassword($u);
    }

    $p = askPassword($u);

    my $dbna;
    if ($#_ >= 0) {
	$dbna = shift(@_);
    }
    else {
	$dbna = "mysql";
    }
    
    my $dbho = 'localhost'; #shift(@_);

    #Search for the mysq.sock file
    my $sock = "/tmp/mysql.sock";
    unless (-e $sock) {
      ($sock = `mysql_config --socket`) or logFatal("Error invoking mysql_config --socket.");
      chomp($sock);
    }
    if (-e $sock) {
      $ENV{MYSQL_UNIX_PORT} = $sock;
    } else {
      logFatal("Can't find MySQL socket file '$sock'.");
    }

    my $db = DBI->connect("DBI:mysql:host=" . $dbho
			  #. ";host=" . $dbho
			  . ":mysql_server_prepare=1"
			  , $u, $p,
			  {'RaiseError' => 0, 'PrintError' => 0})

	|| logFatal("Can't connect to DB." . printDBError());

    print "MySQL server: $db->{mysql_serverinfo}";
    print "MySQL used to compile DBD interface: $db->{mysql_clientversion}\n";

    print "--> Login successfull";
    return $db;
}



sub useDB {
    my $db = shift(@_);
    exec_sql(qq{
	\#\@ONERR_DIE|Database $db does not exists|
	USE $db//
    });
}



sub substKeyword {
    $_ = shift(@_);
    chomp;

    #print $user, $host, $group, $su, $descr, $dbname, $table, $myrover;
    s/\@USER@/$user/g;
    s/\@PASS@/$pass/g;
    s/\@HOST@/$host/g;
    s/\@GROUP@/$group/g;
    s/\@SU@/$su/g;
    s/\@DESCR@/$descr/g;
    s/\@EMAIL@/$email/g;
    s/\@DB@/$dbname/g;
    s/\@TABLE@/$table/g;
    s/\@VIEW@/$view/g;
    s/\@FLIST@/$flist/g;
    s/\@MYROVER@/$myrover/g;
    $_ = trim($_);
    if ((substr($_, 0, 1) ne '#')   ||   (substr($_, 0, 2) eq '#@'))  { #Skip comments
	if (($_ ne '')   &&   ($_ ne ' ')) { #Skip blank lines
	    return $_;
	}
    }
    return '';
}



sub prepareQueries {
    my $sql = shift(@_);
    my $ll = '';
    my @v = split(/\n/, $sql);
    $sql = '';
    foreach $ll (@v) {
        $sql .= substKeyword($ll) . ' ';
    }
    return $sql;
}


sub printDBError {
    if ($DBI::errstr) {
	return "\nMySQL error: $DBI::errstr\n";
    }
    else {
	return ''; }
}



sub execute {
    my @v = split(/\/\//, shift(@_));
    my $ret = 1;
    my $sql = '';
    my $sth;

    foreach $sql (@v) {
	$sql = trim($sql);
	if ($sql eq '') { next; }

	my @vv = split(/\|/, trim($sql));
	$sql = trim($vv[$#vv]);
	
	if ($optlog) { print "$sql//\n"; }
	if ($optlogfile) { print $logfd "$sql//\n"; }

	if (($optreadonly == 0)   ||   ($sql =~ /^SELECT/)   ||   ($sql =~ /^USE/)) {
	    if (! $dbh->do($sql)) {
		
		if ($vv[0] =~ /^\#\@ONERR_IGNORE_RETURN/) {
		    return 0;
		}
		if ($vv[0] =~ /^\#\@ONERR_IGNORE/) {
		    ; #If no directive is specified this is the default
		}
		if ($vv[0] =~ /^\#\@ONERR_WARN/) {
		    logWarn($vv[1] . printDBError());
		}
		if ($vv[0] =~ /^\#\@ONERR_INFO_RETURN/) {
		    logInfo($vv[1]);
		    return 0;
		}
		if ($vv[0] =~ /^\#\@ONERR_INFO/) {
		    logInfo($vv[1]);
		}
		if ($vv[0] =~ /^\#\@ONERR_RETURN/) {
		    logErr($vv[1] . printDBError());
		    return 0;
		}
		if ($vv[0] =~ /^\#\@ONERR_DIE/) {
		    logFatal($vv[1] . printDBError());
		}
	    }
	}
    }
    return $ret;
}
    


sub exec_sql {
    my $sql = shift(@_);
    return execute(prepareQueries($sql));
}


sub exec_file {
    my $fi = shift(@_);
    return execute(readFile("$fi"));
}


sub Exists {
    my $table = shift(@_);
    my $field = '';
    if ($#_ >= 0) {
	$field = shift(@_);
    }
    
    if ($field eq '') {
	return exec_sql(qq{
	    \#\@ONERR_IGNORE_RETURN||
	    SELECT COUNT(*) FROM $table//
	});
    }
    else {
	return exec_sql(qq{
	    \#\@ONERR_IGNORE_RETURN||
	    SELECT $field FROM $table//
	});
    }
}




sub query {
    my $sql = shift(@_);
    my $field = -1;
    my @res;
    
    if ($#_ >= 0) {
        $field = shift(@_);  }
    
    #print $out "$sql";
    if ($optlog) { print "$sql//\n"; }
    if ($optlogfile) { print $logfd "$sql//\n"; }

    my $qry = $dbh->prepare($sql)  ||   die("Error in SQL query");
    my ($i, $j);

    if (! $qry->execute()) {
	die "Error executing: $sql" . printDBError();
    }
    for ($i=0; $i<$qry->rows; $i++) {
	my @row = $qry->fetchrow_array;
	
	for ($j=0; $j<=$#row; $j++) {
	    if (! defined($row[$j])) {
		$row[$j]  = '(NULL)'; 
	    }
	}
	
	if ($field == -1) {
	    $res[$i] = join("\t", @row);
	}
	else {
	    $res[$i] = $row[$field];
	}
    }
    return @res;
}





# ---- Action routines
sub init {
    if ($dbh == 0) {
	print $MYROhead;
	$dbh = connectToDB($dbname);
    }

    if ($optlogfile) {
	if (-e $logfileName) {
	    die "Log file $logfileName already exists";
	}
	open ($logfd, "> $logfileName") || die("Cannot open file $logfileName");
    }
}


sub myro_check {
    if ($myro_checked == 0) {
	init();
	exec_file("check.sql");
	$myro_checked = 1;
    }
    return 1;
}

sub myro_update_user_list {
   exec_file("update_user_list.sql");
   return 1;
}


sub myro_deinstall {
    init();

    my @v = query("SELECT db, name FROM myro.tbl");
    my $l;
    my @rec;
    if ($#v >= 0) {
	foreach $l (@v) {
	    @rec = split(/\t/, $l);
	    logErr("Table $rec[0].$rec[1] is still protected (try with --remprotect $rec[0] $rec[1])");
	}
	logFatal "Must remove protection from tables before deinstalling MYRO.";
    }

    print "--> Drop MYRO facilities...";
    exec_file("drop_myro.sql");
    return 1;
}


sub myro_install {
    init();

    # commentata perche' se myro non e' installato porta ad un errore
    #myro_deinstall();  

    print "--> Install MYRO facilities...";
    exec_file("create_myro.sql");
    exec_file("udf.sql");
    myro_update_user_list();
    return 1;
}





sub myro_getInput {
    my $num = shift(@_);
    my $stdin = shift(@_); 
    my $i;
    my $j;
    my @ret;
    my $s;

    for ($i=0; $i<$num; $i++) {
	if ($stdin == 0) {
	    $ret[$i] = shift(@_);
	}
	else {
	    $s = shift(@_);

	    for ($j=0; $j<$i; $j++) {
		$s =~ s/\\$j/$ret[$j]/g;
	    }
	    print $s;
	    $ret[$i] = readStdin();
	}

	if ($i == 0) {
	    if (! ($ret[$i])) { last; }
	}
    }
    return @ret;
}



sub myro_protect {
    myro_check();

    if ($_[0] != 0) {
	push @_, 'Insert database name (end with RETURN): ';
	push @_, 'Insert table name to protect: ';
	push @_, 'Insert name of the view to be created: ';
    }
    ($dbname, $table, $view) = myro_getInput(3, @_);

    if (! ($dbname))
    { return 1; }

    if (! ($table))
    { return 1; }

    if (! ($view))
    { return 1; }

    my @v = query("SELECT COLUMN_NAME FROM information_schema.columns WHERE TABLE_SCHEMA = '$dbname' AND TABLE_NAME = '$table' AND COLUMN_NAME != 'my_uid' AND COLUMN_NAME != 'my_gid' AND COLUMN_NAME != 'my_perm' ORDER BY ORDINAL_POSITION");
    $flist = join(',', @v);

    print "--> Applying protection to table $dbname.$table...";
    exec_file("protect.sql");
    return 1;
}


sub myro_remprotect {
    myro_check();

    if ($_[0] != 0) {
	push @_, 'Insert database name (end with RETURN): ';
	push @_, 'Insert protected table name: ';
    }
    ($dbname, $table) = myro_getInput(2, @_);

    if (! ($dbname))
    { return 1; }
	
    if (! ($table))
    { return 1; }

    my @v = query("SELECT viewname FROM myro.tbl WHERE name = '$table'");
    $view = $v[0];

    if ((!$view)   ||   ($view eq '(NULL)' )) { $view = $table; }

    print "--> Removing protection from table $dbname.$table ($view)...";
    exec_file("remprotect.sql");
    return 1;
}




sub myro_extended {
    myro_check();

    if ($_[0] != 0) {
	push @_, 'Insert database name (end with RETURN): ';
	push @_, 'Insert protected table name: ';
    }
    ($dbname, $table) = myro_getInput(2, @_);

    if (! ($dbname))
    { return 1; }
	
    if (! ($table))
    { return 1; }

    my @v = query("SELECT viewname FROM myro.tbl WHERE name = '$table'");
    $view = $v[0];

    if ((!$view)   ||   ($view eq '(NULL)' )) { $view = $table; }

    @v = query("SELECT COLUMN_NAME FROM information_schema.columns WHERE TABLE_SCHEMA = '$dbname' AND TABLE_NAME = '$table' AND COLUMN_NAME != 'my_uid' AND COLUMN_NAME != 'my_gid' AND COLUMN_NAME != 'my_perm' ORDER BY ORDINAL_POSITION");
    $flist = join(',', @v);

    print "--> Creating extended views for table $dbname.$table ($view)...";
    exec_file("extview.sql");
    return 1;
}



sub myro_udf {
    myro_check();
    print "--> Install MYRO UDF...";
    exec_file("udf.sql");
    return 1;
}


sub myro_addgroup {
    myro_check();

    if ($_[0] != 0) {
	push @_, 'Insert group name (end with RETURN): ';
	push @_, 'Insert description for group \0: ';
    }
    ($group, $descr) = myro_getInput(2, @_);

    if (! ($group))
    { return 1; }

    if (! ($descr))  { $descr  = ""; }
	
    print "--> Adding group $group ($descr)...";
    exec_file("add_group.sql");
    return 1;
}



sub myro_delgroup {
    myro_check();

    if ($_[0] != 0) {
	push @_, 'Insert group name (end with RETURN): ';
    }
    ($group) = myro_getInput(1, @_);

    if (! ($group))
    { return 1; }

    print "--> Deleting group $group...";
    exec_file("del_group.sql");
    return 1;
}


sub myro_moduser {
    myro_check();


    if ($_[0] != 0) {
	push @_, 'Insert user name (end with RETURN): ';
	push @_, 'Insert default group for user \0: ';
	push @_, 'Is \0 a super user (0/1) [0]: ';
	push @_, 'Insert description for \0';
	push @_, 'Insert email address for \0';
    }
    ($user, $group, $su, $descr, $email) = myro_getInput(5, @_);

    if (! ($user))
    { return 1; }
	
    if (! ($group))  { $group  = $user; }
    if ($su != 1  )  { $su     = 0 ; }
    if (! ($descr))  { $descr  = ""; }
    if (! ($email))  { $email  = ""; }

    my @res = query("SELECT grp FROM myro.grp WHERE grp = '$group'");
    if ($#res < 0) {
	logInfo("There's no group named $group");
	my $lgroup = $group; my $ldescr = $descr; 
	myro_addgroup(0, $group, "");
	$group = $lgroup; $descr = $ldescr;
    }

    print "--> Modifying entry for user $user...";
    exec_file("mod_user.sql");
    return 1;
}


sub myro_grant_user {
    my $stdin = shift(@_); 
    myro_check();

    while (1) {
	if ($stdin == 0) {
	    $user = shift(@_);
	    $host = shift(@_);
	    $dbname = shift(@_);
	    $view = shift(@_);
	}
	else {
	    print "\n\nInsert user name (end with RETURN): ";
	    $user  = readStdin();
	    if (! ($user))
	    { return 1; }

	    print "Insert host address from which user connects [localhost]: ";
	    $dbname = readStdin();
	    if (! ($host)) { $host = "localhost"; }

	    print "Insert database name: ";
	    $dbname = readStdin();

	    print "Insert view name: ";
	    $view   = readStdin();
	}
	
	if (! ($user))
	{ return 1; }

	print "--> Set grants for user $user on table $dbname.$table...";
	exec_file("set_user_grant.sql");
    }
    return 1;
}


sub myro_assign {
    my $stdin = shift(@_);
    myro_check();

    while (1) {
        if ($stdin == 0) {
            $user = shift(@_);
            $group = shift(@_);
        }
        else {
	    print "\n\nInsert user name (end with RETURN): ";
            $user  = readStdin();
            if (! ($user))
            { return 1; }

            print "Insert group to which assign user [$user]: ";
            $group = readStdin();
            if (! ($group)) { $group = "$user"; }
	}


       if (! ($user))
       { return 1; }

        print "--> Assign user $user to group $group...";

	exec_sql(qq{
	    \#\@ONERR_DIE|ssss|
	    SELECT myro.assign_usr_to_grp('$user', '$group', 1)//
	    });
    }

    return 1;
}





sub myro_check_grants {
    my @v = query('SELECT usr.usr, usr.su, tbl.db, tbl.name FROM myro.usr, myro.tbl');
    my $t;
    my @rec;

# ---- 2019/07/23 commented because of failure if the anonymous user does not exist
    #exec_sql(qq{
#	\#\@ONERR_DIE|Cannot assign SELECT, EXECUTE grants to DB myro|
#	GRANT SELECT, EXECUTE ON myro.* TO ''\@'%';
#       });

    foreach $t (@v) {
	@rec = split(/\t/, $t);
	if ($rec[1] == 1) { next; }

	print "--> Checking grants for user $rec[0] on table $rec[2].$rec[3]...";
	my @v2 = query("SELECT myro.user_can_access('$rec[0]', '$rec[2]', '$rec[3]')");

	my $check = $v2[0];
	if ($check > 0) {
	    my $s = "User $rec[0] can access directly the $rec[2].$rec[3] table ";
	    if ($check == 1) {
		$s .= "through a grant on the database level";
	    }
	    elsif ($check == 2) {
		$s .= "through a grant on the table level";
	    }
	    elsif ($check == 3) {
		$s .= "through a grant on the column level";
	    }
	    else {
		die "Unexpected value: $check";
	    }
	    
	    $s .= " (try SHOW GRANTS FOR $rec[0]\@host).";
	    logWarn($s);
	    myro_log("");
	}
    }
}



sub splitArgs {
    my @v;

    while ($#ARGV >= 0) {
	if ($ARGV[$#ARGV] =~ /^--/)
	{ last; }
	push @v, shift(@ARGV);
	#print "---- $v[$#v]\n";
    }

    if ($optinteractive) {
	#Cut all arguments, they must be give through stdin
	$#v = -1;
    }

    return @v;
}




# ---- MAIN ----
my $ret = 1000;

while ($#ARGV >= 0) {
    my $opt = shift(@ARGV);

    if (($opt eq "--ver")  ||  ($opt eq "-v")) {
	print "MYRO version: $myrover\n";
	exit 0;

    } elsif (($opt eq "--help")  ||  ($opt eq "-h")) {
	print $MYROhead;
	usage();
	exit 0;

    } elsif ($opt eq "--interactive") {
	$optinteractive = 1;

    } elsif ($opt eq "--readonly") {
	$optreadonly = 1;

    } elsif ($opt eq "--cnf") {
        $read_cnf = 1;

    } elsif ($opt eq "--log") {
	$optlog = 1;

    } elsif ($opt eq "--logfile") {
	$optlogfile = 1;

    } elsif ($opt eq "--install") {
	$ret = myro_install();
	
    } elsif ($opt eq "--deinstall") {
	$ret = myro_deinstall();
	exit; #Don't want to do nothing else after MyRO has been deinstalled

    } elsif ($opt eq "--protect") {
	$ret = myro_protect($optinteractive, splitArgs());
	
    } elsif ($opt eq "--remprotect") {
	$ret = myro_remprotect($optinteractive, splitArgs());

    } elsif ($opt eq "--extended") {
	$ret = myro_extended($optinteractive, splitArgs());

    } elsif ($opt eq "--udf") {
	$ret = myro_udf($optinteractive, splitArgs());
	
    } elsif ($opt eq "--addgroup") {
	$ret =  myro_addgroup($optinteractive, splitArgs());
	
    } elsif ($opt eq "--delgroup") {
	$ret = myro_delgroup($optinteractive, splitArgs());
	
    } elsif ($opt eq "--moduser") {
	$ret = myro_moduser($optinteractive, splitArgs());

    } elsif ($opt eq "--assign") {
	$ret = myro_assign($optinteractive, splitArgs());

    } elsif ($opt eq "--grant") {
	$ret = myro_grant_user($optinteractive, splitArgs());
	
    } else {
	logFatal("Unknown option: $opt");
    }

}

if ($ret == 1000) {
    myro_check();
    myro_update_user_list();
    myro_check_grants();
}




